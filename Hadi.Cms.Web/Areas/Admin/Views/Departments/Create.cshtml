@using Hadi.Cms.Language.Resources
@model Hadi.Cms.ApplicationService.CommandModels.DepartmentCreateCommand

@{
    ViewBag.Title = Strings.Global_NewDepartment;
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section style{
    @Styles.Render("~/Content/RadaTemplate/css/plugins/summernot")
}


<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>@Strings.Global_NewDepartment</h2>
        <ol class="breadcrumb">
            <li>
                @if (ViewBag.Success == "1")
                {
                    <a href="@Url.Action("Create", "Departments", new { area = "Admin" })" class="btn btn-primary">
                        @Strings.Global_NewDepartment
                    </a>
                }
            </li>
            <div style="float: left; display: @(ViewBag.Success == null ? "none" : "block")">
                <div class="alert @(ViewBag.Success == "1" ? "alert-success" : "alert-danger") alert-dismissable">
                    <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
                    @ViewBag.Message
                </div>
            </div>
        </ol>
    </div>
    <div class="col-lg-2">

    </div>
</div>

@using (Html.BeginForm("Create", "Departments", FormMethod.Post, new { id = "CreateDepartmentForm", @class = "form-horizontal m-t-md", @enctype = "multipart/form-data" }))
{
    <div class="row">
        @Html.AntiForgeryToken()

        <div class="col-md-12 col-lg-6">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>@Strings.Global_BaseInformation</h5>
                </div>
                <div class="ibox-content">
                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_Title)
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control rtl-input" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_Slogan)
                        @Html.EditorFor(model => model.Slogan, new { htmlAttributes = new { @class = "form-control rtl-input" } })
                        @Html.ValidationMessageFor(model => model.Slogan, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_Color)
                        <input type="text" name="Color" id="Color" class="form-control rtl-input" value="" data-jscolor />
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_IsActive)
                        @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "rtl-input i-checks" } })
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>

                </div>
            </div>

        </div>
        <div class="col-md-12 col-lg-6">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>@Strings.Global_FurtherInformation</h5>
                </div>
                <div class="ibox-content">

                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_Services)
                        @Html.DropDownListFor(model => model.ServicesId, new SelectList(ViewBag.Services, "Id", "Title"), "", new { @class = "form-control multiselect2" })
                        @Html.ValidationMessageFor(model => model.ServicesId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_JoinOurTeamDescription)
                        @Html.TextAreaFor(model => model.JoinOurTeamDescription, new { @class = "form-control rtl-input description", rows = 8 })
                        @Html.ValidationMessageFor(model => model.JoinOurTeamDescription, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_AttachmentImageId)
                        <input type="file" accept="image/*" name="file" id="file">
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_HeaderBackgroundImage)
                        <input type="file" accept="image/*" name="headerBackgroundImage" id="headerBackgroundImage">
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_StructureImage)
                        <input type="file" accept="image/*" name="structureImage" id="structureImage">
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_JoinOurTeamImage)
                        <input type="file" accept="image/*" name="joinOurTeamImage" id="joinOurTeamImage">
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_InternshipButtonIsActive)
                        @Html.EditorFor(model => model.InternshipButtonIsActive, new { htmlAttributes = new { @class = "rtl-input i-checks" } })
                        @Html.ValidationMessageFor(model => model.InternshipButtonIsActive, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_RecruitmentButtonIsActive)
                        @Html.EditorFor(model => model.RecruitmentButtonIsActive, new { htmlAttributes = new { @class = "rtl-input i-checks" } })
                        @Html.ValidationMessageFor(model => model.RecruitmentButtonIsActive, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.DepartmentModel_ContactUsLink)
                        @Html.EditorFor(model => model.ContactUsLink, new { htmlAttributes = new { @class = "form-control rtl-input" } })
                        @Html.ValidationMessageFor(model => model.ContactUsLink, "", new { @class = "text-danger" })
                    </div>

                </div>
            </div>

        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-4 col-sm-offset-0">
            <input type="submit" value="@Strings.Global_Save" class="btn btn-primary" />
        </div>
    </div>
}


@section scripts{

    @Scripts.Render("~/Content/RadaTemplate/js/plugins/summernote")
    <script src="/Scripts/jscolor.js"></script>
    <script>
        $(function () {
            $('#CreateDepartmentForm').submit(function () {

                $("#JoinOurTeamDescription").val(persianToEnglishNumber($(".note-editable").html()));
                var formData = new FormData($(this)[0]);
                $.ajax({
                    url: this.action,
                    type: this.method,
                    data: formData,
                    success: function (result) {
                        alert(result);
                    },
                    error: function () {
                        alert('error');
                    }
                });
                return false;
            });

            $('.i-checks').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green'
            });
            var selectedService = "@ViewBag.SelectedService".split(',');
            $("#ServicesId").val(selectedService).trigger("change");

            $('.description').summernote();
            $('.note-codable').css('direction', 'ltr');
            $('.note-editable').html(persianToEnglishNumber($(".note-editable").html()));
        });

        function persianToEnglishNumber(input) {
            var inputstring = input;
            var persian = ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"];
            var english = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
            for (var i = 0; i < 10; i++) {
                var regex = new RegExp(persian[i], 'g');
                inputstring = inputstring.toString().replace(regex, english[i]);
            }
            return inputstring;
        }

    </script>
}
