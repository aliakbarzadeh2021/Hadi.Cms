@using Hadi.Cms.Language.Resources
@using Hadi.Cms.ApplicationService.Services
@using Hadi.Cms.Infrastructure.Helpers

@model Hadi.Cms.ApplicationService.CommandModels.ProjectEditCommand

@{
    ViewBag.Title = Strings.Global_EditProject;
}

@section style{
    @Styles.Render("~/Content/RadaTemplate/css/plugins/summernot")
    @Styles.Render("~/Content/RadaTemplate/css/plugins")
}
<style type="text/css">
    .slider-box {
        border: 2px solid rgba(199, 197, 197, 1) !important;
        padding: 16px 10px 0px 10px !important;
    }

    }

    porojec-slider {
        width: 100%;
        height: auto;
    }

    .container-slider {
        padding: 3px;
        width: 40%;
    }

    .project-slider-img {
        width: 100%;
        transition-duration: .3s;
        padding: 1px;
        height: 100px;
        margin-bottom: 20px;
    }

    .delete-slider {
        position: absolute;
        top: 25px;
        right: 85px;
        opacity: 0;
        transition-duration: .3s;
    }

        .delete-slider:hover {
            opacity: 1
        }
</style>

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>@Strings.Global_EditProject</h2>
        <ol class="breadcrumb">
            <li>
                @if (ViewBag.Success == "1")
                {
                    <a href="@Url.Action("Edit", "Projects", new { area = "Admin" })" class="btn btn-primary">
                        @Strings.Global_EditProject
                    </a>
                }
            </li>
            <div style="float: left; display: @(ViewBag.Success == null ? "none" : "block")">
                <div class="alert @(ViewBag.Success == "1" ? "alert-success" : "alert-danger") alert-dismissable">
                    <button aria-hidden="true" data-dismiss="alert" class="close" type="button">Ã—</button>
                    @ViewBag.Message
                </div>
            </div>
        </ol>
    </div>
    <div class="col-lg-2">

    </div>
</div>

@using (Html.BeginForm("Edit", "Projects", FormMethod.Post, new { id = "EditProjectForm", @class = "form-horizontal m-t-md", @enctype = "multipart/form-data" }))
{
    <div class="row">
        @Html.AntiForgeryToken()

        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.PreviewImageGuid)
        @Html.HiddenFor(model => model.ImageGuid)
        @Html.HiddenFor(model => model.FirstStepImage)

        <div class="col-md-12 col-sm-12 col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>@Strings.Global_BaseInformation</h5>
                </div>
                <div class="ibox-content">
                    <div class="form-group">
                        @Html.Label(Strings.ProjectModel_Title)
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control rtl-input" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.ProjectModel_ProjectType)
                        @Html.EditorFor(model => model.ProjectType, new { htmlAttributes = new { @class = "form-control rtl-input" } })
                        @Html.ValidationMessageFor(model => model.ProjectType, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.ProjectModel_EmployerId)
                        @Html.DropDownListFor(model => model.EmployerId, new SelectList(ViewBag.Employers, "Id", "Name"), new { @class = "form-control rtl-input" })
                        @Html.ValidationMessageFor(model => model.EmployerId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.ProjectModel_ProjectLink)
                        @Html.EditorFor(model => model.ProjectLink, new { htmlAttributes = new { @class = "form-control rtl-input" } })
                        @Html.ValidationMessageFor(model => model.ProjectLink, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.ProjectModel_ProjectLinkText)
                        @Html.EditorFor(model => model.ProjectLinkText, new { htmlAttributes = new { @class = "form-control rtl-input" } })
                        @Html.ValidationMessageFor(model => model.ProjectLinkText, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.ProjectModel_Technologies)
                        @Html.DropDownListFor(model => model.TechnologiesId, new SelectList(ViewBag.Technologies, "Id", "Name"), "", new { @class = "form-control multiselect2" })
                        @Html.ValidationMessageFor(model => model.TechnologiesId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.ProjectModel_Tools)
                        @Html.DropDownListFor(model => model.ToolsId, new SelectList(ViewBag.Tools, "Id", "Name"), "", new { @class = "form-control multiselect2" })
                        @Html.ValidationMessageFor(model => model.ToolsId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.ProjectModel_Tags)
                        @Html.DropDownListFor(model => model.ProjectTagsId, new SelectList(ViewBag.Tags, "Id", "Title"), "", new { @class = "form-control multiselect2" })
                        @Html.ValidationMessageFor(model => model.ProjectTagsId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label(Strings.PageModel_IsActive)
                        @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "rtl-input i-checks" } })
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.Label(Strings.ProjectModel_PreviewImage)
                        </div>
                        <div class="col-sm-5">
                            <input type="file" accept="image/*" name="projectPreviewImage" id="projectPreviewImage">
                        </div>
                        @Html.ValidationMessageFor(model => model.ImageGuid, "", new { @class = "text-danger" })

                        @if (!string.IsNullOrEmpty(Model.PreviewImageSource))
                        {
                            <div class="col-sm-4 input-group">
                                <img alt="image" class="img-preview img-news" src="@Model.PreviewImageSource" />
                            </div>
                        }
                    </div>

                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.Label(Strings.ProjectModel_AttachmentImage)
                        </div>
                        <div class="col-sm-5">
                            <input type="file" accept="image/*" name="projectImage" id="ProjectImage">
                        </div>
                        @Html.ValidationMessageFor(model => model.ImageGuid, "", new { @class = "text-danger" })

                        @if (!string.IsNullOrEmpty(Model.ImageSource))
                        {
                            <div class="col-sm-4 input-group">
                                <img alt="image" class="img-preview img-news" src="@Model.ImageSource" />
                            </div>
                        }
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-md-6">
                            <div class="form-group" id="inputContainer">
                                @Html.Label(Strings.ProjectModel_SliderImages)
                                <input type="file" accept="image/*" name="sliderImages" id="SliderImage">
                            </div>
                            <button class="btn btn-primary" type="button" onclick="addNewInput()">+</button>
                        </div>
                        @if (Model.AttachmentFiles.Count > 0)
                        {
                            <div class="col-lg-6 col-md-6 slider-box">
                                <div class="porojec-slider">

                                    @foreach (var item in Model.AttachmentFiles)
                                    {
                                        <div class="col-lg-4">
                                            <img src="@item.Source" alt="Web Design" class="project-slider-img" />
                                            <div><a onclick="deleteSliderImageAlert('@item.Id')" class="btn btn-danger btn-circle delete-slider" title="@Strings.Global_Delete"><i class="fa fa-remove"></i></a></div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-12 col-sm-12 col-lg-12">
                <div class="ibox float-e-margins">
                    <div class="ibox-content">
                        <div class="form-group form-group-description">
                            @Html.Label(Strings.ProjectModel_Description)
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control description-text rtl-input", rows = 10 } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-12 col-sm-12 col-lg-12">
                <div class="ibox float-e-margins">
                    <div class="ibox-content">
                        <div class="form-group form-group-firststepdescription">
                            @Html.Label(Strings.ProjectModel_FirstStepDescription)
                            @Html.EditorFor(model => model.FirstStepDescription, new { htmlAttributes = new { @class = "form-control first-description rtl-input", rows = 10 } })
                            @Html.ValidationMessageFor(model => model.FirstStepDescription, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <div class="col-sm-3">
                                @Html.Label(Strings.ProjectModel_FirstStepImage)
                            </div>
                            <div class="col-sm-5">
                                <input type="file" accept="image/*" name="firstStepImage" id="FirstStepImage">
                            </div>
                            @Html.ValidationMessageFor(model => model.FirstStepImage, "", new { @class = "text-danger" })

                            @if (!string.IsNullOrEmpty(Model.FirstStepImageSource))
                            {
                                <div class="col-sm-4 input-group">
                                    <img alt="image" class="img-preview img-news" src="@Model.FirstStepImageSource" />
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-12 col-sm-12 col-lg-12">
                <div class="ibox float-e-margins">
                    <div class="ibox-content">
                        <div class="form-group form-group-secondstepdescription">
                            @Html.Label(Strings.ProjectModel_SecondDescription)
                            @Html.EditorFor(model => model.SecondStepDescription, new { htmlAttributes = new { @class = "form-control second-description rtl-input", rows = 10 } })
                            @Html.ValidationMessageFor(model => model.SecondStepDescription, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-12 col-sm-12 col-lg-12">
                <div class="ibox float-e-margins">
                    <div class="ibox-content">
                        <div class="form-group form-group-finalstepdescription">
                            @Html.Label(Strings.ProjectModel_FinalStepDescription)
                            @Html.EditorFor(model => model.FinalStepDescription, new { htmlAttributes = new { @class = "form-control final-text rtl-input", rows = 10 } })
                            @Html.ValidationMessageFor(model => model.FinalStepDescription, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-4 col-sm-offset-0">
            <input type="submit" value="@Strings.Global_Save" class="btn btn-primary" />
        </div>
    </div>
}


@section scripts{
    @Scripts.Render("~/Content/RadaTemplate/js/plugins/summernote")
    @Scripts.Render("~/Content/RadaTemplate/js/plugins")

    <script>

        function deleteSliderImageAlert(id) {
			swal({
				title: '@Strings.Are_You_Sure',
				text: '@Strings.Author_SliderImageDeleteMessage',
				type: "warning",
				showCancelButton: true,
				confirmButtonColor: "#DD6B55",
				confirmButtonText:'@Strings.Yes',
				cancelButtonText: '@Strings.No',
				closeOnConfirm: false,
				closeOnCancel: true
			},
			function (isConfirm) {
				if (isConfirm) {
                    deleteProjectAttachmentFile(id);
				}
			});
        }

            function deleteProjectAttachmentFile(attachmentFileId) {
			var param = "@Url.Action("DeleteSliderImage", "Projects", null, this.Request.Url.Scheme)";
            var ajaxdata = "attachmentFileId=" + attachmentFileId + "&" + "projectId=" + '@Model.Id';
			@Html.Ajax("POST", "", "nowhere", "");
            deleteSliderImage(attachmentFileId);
		}

        function deleteSliderImage(id) {
			var param = "@Url.Action("Delete", "AttachmentFiles", null, this.Request.Url.Scheme)";
            var ajaxdata = "id=" + id;
			@Html.Ajax("POST", "", "nowhere", "returnDeleteSliderImage")
        }

        function returnDeleteSliderImage(data) {
			swal({
				title: data.Success,
				text: data.Message,
				type: data.Type,
				showCancelButton: false,
				confirmButtonColor: "#23c6c8",
				confirmButtonText: "OK",
				closeOnConfirm: true
			}, function () {
				window.location.reload();
			});
        }



        $(function () {
            $('#EditProjectForm').submit(function () {
                if ($("#Title").val() === "") {
                    MyAlert('@Strings.Error', '@Strings.ProjectModel_Title_Required', 4000, 'error');
                    return false;
                }
                else {
                    $("#Description").val(persianToEnglishNumber($(".form-group-description .note-editable").html()));
                    $("#FirstStepDescription").val(persianToEnglishNumber($(".form-group-firststepdescription .note-editable").html()));
                    $("#SecondStepDescription").val(persianToEnglishNumber($(".form-group-secondstepdescription .note-editable").html()));
                    $("#FinalStepDescription").val(persianToEnglishNumber($(".form-group-finalstepdescription .note-editable").html()));

                    var formData = new FormData($(this)[0]);
                    $.ajax({
                        url: this.action,
                        type: this.method,
                        data: formData,
                        success: function (result) {
                            alert(result);
                        },
                        error: function () {
                            alert('error');
                        }
                    });
                    return false;
                }
            });

            $('.footable').footable();

            var selectedTags = "@ViewBag.SelectedTags".split(',');
            $("#Tags").val(selectedTags).trigger("change");

            var selectedTech = "@ViewBag.SelectedTechnologies".split(',');
            $("#TechnologiesId").val(selectedTech).trigger("change");

            var selectedTools = "@ViewBag.SelectedTools".split(',');
            $("#ToolsId").val(selectedTools).trigger("change");

            $("#ProjectTagsId").val(selectedTags).trigger("change");

            $('.description-text').summernote();
            $('.first-description').summernote();
            $('.second-description').summernote();
            $('.final-text').summernote();

            $('.form-group-description .note-codable').css('direction', 'ltr');
            $('.form-group-firststepdescription .note-codable').css('direction', 'ltr');
            $('.form-group-secondstepdescription .note-codable').css('direction', 'ltr');
            $('.form-group-finalstepdescription .note-codable').css('direction', 'ltr');

            $('.form-group-description .note-editable').html(persianToEnglishNumber($(".form-group-description .note-editable").html()));
            $('.form-group-firststepdescription .note-editable').html(persianToEnglishNumber($(".form-group-firststepdescription .note-editable").html()));
            $('.form-group-secondstepdescription .note-editable').html(persianToEnglishNumber($(".form-group-secondstepdescription .note-editable").html()));
            $('.form-group-finalstepdescription .note-editable').html(persianToEnglishNumber($(".form-group-finalstepdescription .note-editable").html()));
        });

        function persianToEnglishNumber(input) {
            var inputstring = input;
            var persian = ["Û°", "Û±", "Û²", "Û³", "Û´", "Ûµ", "Û¶", "Û·", "Û¸", "Û¹"];
            var english = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
            for (var i = 0; i < 10; i++) {
                var regex = new RegExp(persian[i], 'g');
                inputstring = inputstring.toString().replace(regex, english[i]);
            }
            return inputstring;
        }

    var addNewInput = function () {
        var input = document.createElement("input");
        input.setAttribute("type", "file");
        input.setAttribute("accept", "image/*");
        input.setAttribute("name", "sliderImages");
        input.setAttribute("id", "SliderImage");
        input.setAttribute("style", "margin-top:10px;");

        document.getElementById("inputContainer").appendChild(input);
    }

    </script>

}
