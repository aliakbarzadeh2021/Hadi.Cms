@using Hadi.Cms.ApplicationService.Services
@using Hadi.Cms.Language.Resources

@model Hadi.Cms.Model.QueryModels.NewsModel

@{
    ViewBag.Title = Strings.Global_EditNews;
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section style{
    <link href="~/Content/RadaTemplate/css/plugins/persian-datepicker/persian-datepicker.min.css" rel="stylesheet">
    <!-- for checkbox and radios -->
    @Styles.Render("~/Content/RadaTemplate/css/plugins/summernot")
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-12">
        <h2>@Strings.Global_EditNews</h2>
        <ol class="breadcrumb">
            <li>
                @Model.Title
            </li>
            <div style="float: left; display: @(ViewBag.Success == null ? "none" : "block")">
                <div class="alert @(ViewBag.Success == "1" ? "alert-success" : "alert-danger") alert-dismissable">
                    <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
                    @ViewBag.Message
                </div>
            </div>
        </ol>
    </div>
</div>

@using (Html.BeginForm("Edit", "News", FormMethod.Post, new { id = "EditNewsForm", @class = "form-horizontal m-t-md", @enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-7">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>@Strings.Global_NewsContent</h5>
                </div>
                <div class="ibox-content">

                    <input type="hidden" id="Id" name="Id" value="@ViewBag.NewsId" />

                    <div class="form-group">
                        @Html.Label(Strings.NewsModel_RuTitr)
                        @Html.EditorFor(model => model.RuTitr, new { htmlAttributes = new { @class = "form-control rtl-input" } })
                        @Html.ValidationMessageFor(model => model.RuTitr, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.Label(Strings.Global_Category)
                        @Html.DropDownListFor(model => model.CategoriesId, new SelectList(ViewBag.CategoriesId, "Id", "Title"), "", new { @class = "form-control multiselect2" })
                        @Html.ValidationMessageFor(model => model.CategoriesId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.Label(Strings.NewsModel_Title)
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control rtl-input" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.Label(Strings.NewsModel_SubTitle)
                        @Html.EditorFor(model => model.SubTitle, new { htmlAttributes = new { @class = "form-control rtl-input" } })
                        @Html.ValidationMessageFor(model => model.SubTitle, "", new { @class = "text-danger" })
                    </div>

                    @*<div class="form-group">
            @Html.Label(Strings.NewsModel_Source)
            <div class="mail-text h-200">
                <div id="SourceText" class="sourceText">
                    <br />
                </div>
                @Html.HiddenFor(model => model.Source)
                <div class="clearfix"></div>
            </div>
        </div>*@

                    <div class="form-group">
                        @Html.Label(Strings.NewsModel_Source)
                        @Html.TextAreaFor(model => model.Source, new { @class = "form-control rtl-input sourceText", rows = 20 })
                        @Html.ValidationMessageFor(model => model.Source, "", new { @class = "text-danger" })
                    </div>


                </div>
            </div>
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>@Strings.Global_Images</h5>
                </div>
                <div class="ibox-content">
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.Label(Strings.NewsModel_ThumbnailImage)
                        </div>
                        <div class="col-sm-5">
                            <input type="file" accept="image/*" name="file" id="ThumbnailImage">
                        </div>
                        @if (ViewBag.ThumbnailAttachmentGuid != null)
                        {
                            <div class="col-sm-4 input-group">
                                @{
                                    string imgSrcT = "";
                                    if (Model.ThumbnailImage != null)
                                    {
                                        imgSrcT = new AttachmentFileService().GetAttachmentSourceValue(Model.ThumbnailImage);

                                        <text>
                                            <img alt="image" class="img-preview img-news" src="@imgSrcT" />
                                        </text>
                                    }
                                }
                            </div>
                        }
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.Label(Strings.NewsModel_NewsImage)
                        </div>
                        <div class="col-sm-5">
                            <input type="file" accept="image/*" name="file" id="NewsImage">
                        </div>
                        @if (ViewBag.NewsAttachmentGuid != null)
                        {
                            <div class="col-sm-4 input-group">
                                @{
                                    string imgSrcN = "";
                                    if (Model.Image != null)
                                    {
                                        imgSrcN = new AttachmentFileService().GetAttachmentSourceValue(Model.Image);

                                        <text>
                                            <img alt="image" class="img-preview img-news" src="@imgSrcN" />
                                        </text>
                                    }
                                }
                            </div>
                        }
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.Label(Strings.NewsModel_MainTitrImage)
                        </div>
                        <div class="col-sm-5">
                            <input type="file" accept="image/*" name="file" id="MainTitrImage">
                        </div>
                        @if (ViewBag.MainTitrAttachmentGuid != null)
                        {
                            <div class="col-sm-4 input-group">
                                @{
                                    string imgSrcM = "";
                                    if (Model.MainTitrImage != null)
                                    {
                                        imgSrcM = new AttachmentFileService().GetAttachmentSourceValue(Model.MainTitrImage);

                                        <text>
                                            <img alt="image" class="img-preview img-news" src="@imgSrcM" />
                                        </text>
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>@Strings.Global_Settings</h5>
                </div>
                <div class="ibox-content">
                    <div class="form-group">
                        <div class="col-sm-4">
                            @Html.Label(Strings.NewsModel_IsPublished)
                        </div>
                        <div class="col-sm-8 input-group">
                            @Html.CheckBoxFor(model => model.IsPublished, new { @class = "i-checks" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-4">
                            @Html.Label(Strings.NewsModel_IsActive)
                        </div>
                        <div class="col-sm-8 input-group">
                            @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "rtl-input i-checks", @checked = true } })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-4">
                            @Html.Label(Strings.NewsModel_Language)
                        </div>
                        <div class="col-sm-8 input-group">
                            @Html.DropDownListFor(model => model.LanguageId, new SelectList(ViewBag.Languages, "Id", "Name"), "انتخاب کنید...", new { @class = "form-control rtl-input select2" })
                            @Html.ValidationMessageFor(model => model.LanguageId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group" id="NewsReleaseDateControl">
                        <div class="col-sm-4">
                            @Html.Label(Strings.NewsModel_NewsReleaseDate)
                        </div>
                        <div class="col-sm-8 input-group date">
                            @*@{ var ReleaseDate = Model.ReleaseDate.ToString("MM/dd/yyyy HH:mm:ss");}*@
                            @Html.EditorFor(model => model.ReleaseDate, "{0: MM/dd/yyyy HH:mm:ss}", new { htmlAttributes = new { @class = "form-control ltr-input" } })
                        </div>
                    </div>
                    <div class="form-group" id="NewsShowPriorityDateControl">
                        <div class="col-sm-4">
                            @Html.Label(Strings.NewsModel_NewsShowPriorityDate)
                        </div>
                        <div class="col-sm-8 input-group date">
                            @*@{ var ShowPriorityDate = Model.ShowPriorityDate.ToString("MM/dd/yyyy HH:mm:ss");}*@
                            @Html.EditorFor(model => model.ShowPriorityDate, "{0: MM/dd/yyyy HH:mm:ss}", new { htmlAttributes = new { @class = "form-control ltr-input" } })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">
                            @Html.Label(Strings.NewsModel_IsMainTitr)
                        </div>
                        <div class="col-sm-8 input-group">

                            @Html.CheckBoxFor(model => model.IsMainTitr, new { @class = "i-checks" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">
                            @Html.Label(Strings.NewsModel_IsHotLink)
                        </div>
                        <div class="col-sm-8 input-group">
                            @Html.CheckBoxFor(model => model.IsHotLink, new { @class = "i-checks" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">
                            @Html.Label(Strings.NewsModel_IsLiveNews)
                        </div>
                        <div class="col-sm-8 input-group">
                            @Html.CheckBoxFor(model => model.IsLiveNews, new { @class = "i-checks" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">
                            @Html.Label(Strings.NewsModel_WithImage)
                        </div>
                        <div class="col-sm-8 input-group">
                            @Html.CheckBoxFor(model => model.WithImage, new { @class = "i-checks" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">
                            @Html.Label(Strings.NewsModel_WithFilm)
                        </div>
                        <div class="col-sm-8 input-group">
                            @Html.CheckBoxFor(model => model.WithFilm, new { @class = "i-checks" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">
                            @Html.Label(Strings.NewsModel_WithVoice)
                        </div>
                        <div class="col-sm-8 input-group">
                            @Html.CheckBoxFor(model => model.WithVoice, new { @class = "i-checks" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-4 col-sm-offset-0">
            <a href="/Admin/News" class="btn btn-primary">@Strings.Global_BackToList</a>
            <input type="submit" value="@Strings.Global_Save" class="btn btn-primary" />
        </div>
    </div>
}

@section scripts{
    <script src="~/Content/RadaTemplate/js/plugins/cropper/cropper.min.js"></script>
    <!-- Data picker -->
    <script src="~/Content/RadaTemplate/js/plugins/datapicker/bootstrap-datepicker.js"></script>
    <script src="~/Content/RadaTemplate/js/plugins/persian-datepicker/persian-date.js"></script>
    <script src="~/Content/RadaTemplate/js/plugins/persian-datepicker/persian-datepicker.min.js"></script>

    @Scripts.Render("~/Content/RadaTemplate/js/plugins/summernote")

    <script>
		$(function () {
			$('#EditNewsForm').submit(function () {
				if ($("#Title").val() == "") {
					MyAlert('@Strings.Error', '@Strings.News_Title_Error', 4000, 'error');
					return false;
				}
				else {
                    $("#Source").val(persianToEnglishNumber($(".note-editable").html()));

					var formData = new FormData($(this)[0]);
					$.ajax({
						url: this.action,
						type: this.method,
						data: formData,
						success: function (result) {
							alert(result);
						},
						error: function () {
							alert('error');
						}
					});
					return false;
				}
			});

			$('.i-checks').iCheck({
				checkboxClass: 'icheckbox_square-green',
				radioClass: 'iradio_square-green',
			});

            $('.sourceText').summernote();
            $('.note-codable').css('direction', 'ltr');

            $('.note-editable').html(persianToEnglishNumber($(".note-editable").html()));

			$('#NewsReleaseDateControl .input-group.date > input').pDatepicker({
				viewMode: 'month',
				format: 'YYYY/MM/DD HH:mm:ss',
				timePicker: {
					enabled: true
				},
				autoClose: true
			});

			$('#NewsShowPriorityDateControl .input-group.date > input').pDatepicker({
				viewMode: 'month',
				format: 'YYYY/MM/DD HH:mm:ss',
				timePicker: {
					enabled: true
				},
				autoClose: true
			});

			//$(".note-editable").html($("#Source").val());
		});

		function DownloadFile(id) {
			if (id != "null") {
				window.location.href = "@Url.Action("DownloadAttachment", "Document", null, this.Request.Url?.Scheme)?attachmentGuid=" + id;
			} else {
				MyAlert('خطا 404', 'فایل سند مورد نظر یافت نشد', 4000, 'error');
			}
        }

        function persianToEnglishNumber(input) {
            var inputstring = input;
            var persian = ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"];
            var english = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
            for (var i = 0; i < 10; i++) {
                var regex = new RegExp(persian[i], 'g');
                inputstring = inputstring.toString().replace(regex, english[i]);
            }
            return inputstring;
        }
    </script>
}